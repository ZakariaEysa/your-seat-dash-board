import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import '../../movie_detail/presentation/view/movie_details.dart';

class MovieTablePage extends StatefulWidget {
  @override
  _MovieTablePageState createState() => _MovieTablePageState();
}

class _MovieTablePageState extends State<MovieTablePage> {
  final List<Map<String, String>> movies = [
    {
      "name": "Natali Craig",
      "date": "3h 19m",
      "genre": "Drama",
      "rooms": "Turkish",
      "status": "Coming soon",
      "image": "assets/images/NataliCraig.png",
      "censorship": "R",
      "storyLine": "A dramatic story about love and choices.",
      "directors": "John Doe",
      "actors": "Jane Smith, Alex Brown",
      "promoUrl": "https://youtu.be/natali_craig_trailer"
    }, {
      "name": "Kate Morrison",
      "date": "2h 10m",
      "genre": "Comedy",
      "rooms": "Chinese",
      "status": "Playing now",
      "image": "assets/images/KateMorrison.png",
      "censorship": "PG-13",
      "storyLine": "As the Avengers and their allies have continued to protect the world...",
      "directors": "Paul Walker",
      "actors": "Emma Stone, Jack White",
      "promoUrl": "https://youtu.be/kate_morrison_trailer"
    }, {
      "name": "Drew Cano",
      "date": "1h 30",
      "genre": "Action",
      "rooms": "Korean",
      "status": "Playing now",
      "image": "assets/images/DrewCano.png",
      "censorship": "TV-14",
      "storyLine": "As the Avengers and their allies have continued to protect the world...",
      "directors": "Anthony Russo",
      "actors": "Joe Russo, Christopher Robert",
      "promoUrl": "https://youtu.be/drew_cano_trailer"
    }, {
      "name": "Orlando Diggs",
      "date": "2h 15m",
      "genre": "Musical",
      "rooms": "Japanese",
      "status": "Playing now",
      "image": "assets/images/OrlandoDiggs.png",
      "censorship": "TV-PG",
      "storyLine": "A dramatic story about love and choices.",
      "directors": "John Doe, Christopher Robert",
      "actors": "Jane Smith, Alex Brown",
      "promoUrl": "https://youtu.be/orlando_diggs_trailer"
    },
    {
      "name": "Andi Lane",
      "date": "3h",
      "genre": "Biography",
      "rooms": "Hindi",
      "status": "Coming soon",
      "image": "assets/images/AndiLane.png",
      "censorship": "NC-17",
      "storyLine": "A dramatic story about love and choices.",
      "directors": "John Doe",
      "actors": "Jane Smith, Alex Brown",
      "promoUrl": "https://youtu.be/andi_lane_trailer"
    },
    {
      "name": "Natali Craig",
      "date": "2h 30m",
      "genre": "Mystery",
      "rooms": "German",
      "status": "Playing now",
      "image": "assets/images/NataliCraig.png",
      "censorship": "PG",
      "storyLine": "As the Avengers and their allies have continued to protect the world...",
      "directors": "John Doe",
      "actors": "Jane Smith, Alex Brown",
      "promoUrl": "https://youtu.be/natali_craig_trailer_2"
    },
    {
      "name": "Kate Morrison",
      "date": "1h 47m",
      "genre": "Crime",
      "rooms": "German",
      "status": "Coming soon",
      "image": "assets/images/KateMorrison.png",
      "censorship": "TV-Y7",
      "storyLine": "A dramatic story about love and choices.",
      "directors": "John Doe",
      "actors": "Jane Smith, Alex Brown",
      "promoUrl": "https://youtu.be/kate_morrison_trailer_2"
    },
    {
      "name": "Drew Cano",
      "date": "2h",
      "genre": "Documentary",
      "rooms": "Spanish",
      "status": "Coming soon",
      "image": "assets/images/DrewCano.png",
      "censorship": "TV-G",
      "storyLine": "As the Avengers and their allies have continued to protect the world...",
      "directors": "John Doe",
      "actors": "Jane Smith, Alex Brown",
      "promoUrl": "https://youtu.be/drew_cano_trailer_2"
    },
    {
      "name": "Orlando Diggs",
      "date": "2h 30m",
      "genre": "Documentary",
      "rooms": "French",
      "status": "Playing now",
      "image": "assets/images/OrlandoDiggs.png",
      "censorship": "G",
      "storyLine": "A dramatic story about love and choices.",
      "directors": "John Doe",
      "actors": "Jane Smith, Alex Brown",
      "promoUrl": "https://youtu.be/orlando_diggs_trailer_2"
    },
    {
      "name": "Andi Lane",
      "date": "1h 50m",
      "genre": "Animation",
      "rooms": "Arabic",
      "status": "Coming soon",
      "image": "assets/images/AndiLane.png",
      "censorship": "TV-14",
      "storyLine": "As the Avengers and their allies have continued to protect the world...",
      "directors": "John Doe",
      "actors": "Jane Smith, Alex Brown",
      "promoUrl": "https://youtu.be/andi_lane_trailer_2"
    }
  ];

  int? _selectedRowIndex;

  void navigateToMovieDetail(BuildContext context, Map<String, String> movie, {bool isViewOnly = false}) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => MovieDetail(
          movieData: movie,
          isViewOnly: isViewOnly,
        ),
      ),
    );
  }

  void deleteMovie(int index) {
    setState(() {
      movies.removeAt(index);
      _selectedRowIndex = null;
    });
  }

  Color getStatusColor(String status) {
    switch (status) {
      case 'Coming soon':
        return Color(0xFF8A8CD9);
      case 'Playing now':
        return Color(0xFF4AA785);
      default:
        return Colors.black;
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        backgroundColor: Colors.white,
        body: SingleChildScrollView(
            scrollDirection: Axis.horizontal,
            child: DataTable(
                showCheckboxColumn: false,
                columnSpacing: 70,
                headingRowColor: MaterialStateProperty.all(Colors.white),
                dividerThickness: 1.0,
                dataRowColor: MaterialStateProperty.resolveWith<Color?>((Set<MaterialState> states) {
                  if (states.contains(MaterialState.selected)) {
                    return Colors.grey[300];
                  }
                  return Colors.white;
                }),
                columns: const [
                  DataColumn(label: Text('Movie name', style: TextStyle(color: Colors.grey))),
                  DataColumn(label: Text('Duration', style: TextStyle(color: Colors.grey))),
                  DataColumn(label: Text('Movie Genre', style: TextStyle(color: Colors.grey))),
                  DataColumn(label: Text('Language', style: TextStyle(color: Colors.grey))),
                  DataColumn(label: Text('Status', style: TextStyle(color: Colors.grey))),
                  DataColumn(label: Text('Censorship', style: TextStyle(color: Colors.grey))),
                  // Removed Directors and Actors columns
                  DataColumn(label: Text('Action', style: TextStyle(color: Colors.grey)))
                ],
                rows: movies.map((movie) {
                  final int index = movies.indexOf(movie);
                  final bool isSelected = _selectedRowIndex == index;
                  return DataRow(
                      selected: isSelected,
                      onSelectChanged: (selected) {
                        setState(() {
                          _selectedRowIndex = isSelected ? null : index;
                        });
                      },
                      cells: [
                        DataCell(Row(
                            children: [
                              CircleAvatar(backgroundImage: AssetImage(movie['image']!)),
                              SizedBox(width: 4.w),
                              Text(movie['name']!, style: TextStyle(color: Colors.black))
                            ]
                        )),
                        DataCell(Text(movie['date']!, style: TextStyle(color: Colors.black))),
                        DataCell(Text(movie['genre']!, style: TextStyle(color: Colors.black))),
                        DataCell(Text(movie['rooms']!, style: TextStyle(color: Colors.black))),
                        DataCell(Row(
                            children: [
                              Container(
                                  width: 7.w,
                                  height: 7.h,
                                  decoration: BoxDecoration(
                                      color: getStatusColor(movie['status']!),
                                      shape: BoxShape.circle
                                  )
                              ),
                              SizedBox(width: 4.w),
                              Text(movie['status']!, style: TextStyle(color: getStatusColor(movie['status']!)))
                            ]
                        )),
                        DataCell(Text(movie['censorship']!, style: TextStyle(color: Colors.black))),
                        DataCell(Row(
                            children: [
                              IconButton(
<<<<<<< HEAD
                                icon: Icon(Icons.remove_red_eye, color: Colors.purple),
                                onPressed: isSelected
                                    ? () {

                                  navigateToMovieDetail(context, movie, isViewOnly: true);
                                }
                                    : null,
                                tooltip: 'View Only (No Editing)',
                              ),

                              IconButton(
                                icon: Icon(Icons.edit, color: Colors.green),
                                onPressed: isSelected
                                    ? () => showDialog(
                                  context: context,
                                  builder: (context) => AlertDialog(
                                    title: Text("Edit Movie"),
                                    content: Text("Do you want to edit this movie?"),
                                    actions: [
                                      TextButton(
                                        onPressed: () => Navigator.pop(context),
                                        child: Text("Cancel"),
                                      ),
                                      TextButton(
                                        onPressed: () {
                                          Navigator.pop(context);
                                          navigateToMovieDetail(context, movie);
                                        },
                                        child: Text("Edit"),
                                      ),
                                    ],
                                  ),
                                )
                                    : null,
                                tooltip: 'Edit Movie Details',
                              ),
                              IconButton(
                                icon: Icon(Icons.delete, color: Colors.red),
                                onPressed: isSelected
                                    ? () => showDialog(
                                  context: context,
                                  builder: (context) => AlertDialog(
                                    title: Text("Delete Movie"),
                                    content: Text("Are you sure you want to delete this movie?"),
                                    actions: [
                                      TextButton(
                                          onPressed: () => Navigator.pop(context),
                                          child: Text("Cancel")),
                                      TextButton(
                                          onPressed: () {
                                            Navigator.pop(context);
                                            deleteMovie(index);
                                          },
                                          child: Text("OK")),

                                    ],
                                  ),
                                )
                                    : null,
                                  tooltip: 'Delete Movie Details'
                              ),
=======
                                  icon: const Icon(Icons.edit, color: Colors.green),
                                  onPressed: isSelected ? () => navigateToMovieDetail(context) : null
                              ),
                              IconButton(
                                  icon: const Icon(Icons.delete, color: Colors.red),
                                  onPressed: isSelected ? () => deleteMovie(index) : null
                              )
>>>>>>> origin/Rahaf
                            ]
                        ))
                      ]
                  );
                }).toList()
            )
        )
    );
  }
}
